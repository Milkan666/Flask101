# -*- coding: utf-8 -*-
"""CA1 Project_20043307.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dt3AVuS7vKHhlxhdEk1V10IZig1H76a5

Initially I was working on this notebook : https://colab.research.google.com/drive/1Th5bsjHjNhTaAgS23nT2MSyhbjrdx4m1?usp=sharing

but in this current notebook I made some changes to it.
"""

import requests
import json
import pandas as pd

url = 'https://sik.search.blue.cdtapps.com/ie/en/search?c=sr&v=20240110'

headers = headers = {'accept':'*/*',
'accept-encoding':'gzip, deflate, br, zstd',
'accept-language':'en-US,en;q=0.9',
'content-length':'528',
'content-type':'text/plain;charset=UTF-8',
'origin':'https://www.ikea.com',
'priority':'u=1, i',
'referer':'https://www.ikea.com/',
'sec-ch-ua':'"Google Chrome";v="131", "Chromium";v="131", "Not_A Brand";v="24"',
'sec-ch-ua-mobile':'?0',
'sec-ch-ua-platform':'"Windows"',
'sec-fetch-dest':'empty',
'sec-fetch-mode':'cors',
'sec-fetch-site':'cross-site',
'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36'}
data='{"searchParameters":{"input":"table & chairs","type":"QUERY"},"zip":"D08 XY17","store":"038","allowAutocorrect":true,"isUserLoggedIn":false,"optimizely":{"listing_3050_ablate_image_hover_effect":null,"listing_3086_ratings_and_review_popup":null},"components":[{"component":"PRIMARY_AREA","columns":4,"types":{"main":"PRODUCT","breakouts":["PLANNER","CATEGORY","CONTENT","MATTRESS_WARRANTY"]},"filterConfig":{"subcategories-style":"tree-navigation","f-online-sellable":true},"sort":"RELEVANCE","window":{"offset":72,"size":24}}]}'

response = requests.post(url, headers=headers, data=data)
print(response)

json_data = response.json()
json_data

print(json_data.keys())

results = json_data.get('results', [])
if results:
    for result in results:
        print(result.keys())
        components = result.get('components', [])
        items = result.get('items', [])
        print(f"Components: {components}")
        print(f"Items: {items}")
else:
    print("No results found.")

#df=pd.json_normalize(json_data)
#df

# Initialize a list to store all product data
all_products = []

# Paginate through the results (24 products per page)
for offset in range(0, 95, 24):  # Adjust pagination for all products
    data = {
        "searchParameters": {"input": "table & chairs", "type": "QUERY"},
        "zip": "D08 XY17",
        "store": "038",
        "allowAutocorrect": True,
        "components": [{
            "component": "PRIMARY_AREA",
            "window": {"offset": offset, "size": 24}
        }]
    }

    # Send POST request
    response = requests.post(url, headers=headers, json=data)
    response.raise_for_status()
    json_data = response.json()

    # Extract items from the response
    results = json_data.get('results', [])
    for result in results:
        items = result.get('items', [])
        for item in items:
            product = item.get('product', {})
            all_products.append(product)

# Convert the list of products into a Pandas DataFrame
df = pd.json_normalize(all_products)

# Display the DataFrame
df

df

df.info()

# Column to search
search_column = "salesPrice.currencyCode"

# Check if the column exists in the DataFrame
if search_column in df.columns:
    print(f"Column '{search_column}' exists in the DataFrame.")
    # Display the column's data
    print(df[search_column])
else:
    print(f"Column '{search_column}' does not exist in the DataFrame.")

#file_path = '/content/drive/MyDrive/Colab Notebooks/CA2 Project/products.xlsx'

# Export the DataFrame to an Excel file
#df.to_excel(file_path, index=False)

#print(f"DataFrame has been successfully saved to {file_path}")

df.info()

df_clean = df.drop(columns=['pipUrl', 'itemMeasureReferenceText', 'itemNoGlobal', 'contextualImageUrl', 'mainImageAlt',
    'itemType', 'quickFacts', 'features', 'tag', 'salesPrice.current.separator', 'salesPrice.current.decimals',
    'salesPrice.current.suffix', 'salesPrice.current.isRegularCurrency', 'salesPrice.isBreathTaking', 'salesPrice.discount',
    'salesPrice.tag', 'salesPrice.priceText', 'businessStructure.homeFurnishingBusinessNo', 'businessStructure.productAreaNo',
    'businessStructure.productRangeAreaNo', 'optimizelyAttributes.PRODUCT_TYPE', 'tagText', 'salesPrice.tagText', 'lastChanceText',
    'ratingValue', 'ratingCount', 'badge.type', 'badge.text', 'salesPrice.previous.prefix', 'salesPrice.previous.wholeNumber',
    'salesPrice.previous.separator', 'salesPrice.previous.decimals', 'salesPrice.previous.suffix', 'salesPrice.previous.isRegularCurrency',
    'salesPrice.prevPriceLabel', 'salesPrice.validFrom', 'salesPrice.validTo', 'filterClass', 'onlineSellable', 'lastChance', 'itemNo', 'categoryPath',
    'gprDescription.variants', 'salesPrice.current.wholeNumber', 'businessStructure.homeFurnishingBusinessName','businessStructure.productAreaName', 'salesPrice.current.prefix'])

df_clean.info()

df_clean.head()

new_column_names = {
    'name': 'Product name',
    'mainImageUrl': 'Image URL',
    'typeName' : 'Product type',
    'validDesignText': 'Design type',
    'price_prefix': 'Price prefix',
    'salesPrice.numeral': 'Price',
    'salesPrice.currencyCode' : 'Currency',
    'businessStructure.productRangeAreaName' : 'Product Category',
    'gprDescription.numberOfVariants' : 'Product variants'
}

# Rename the columns
df_clean = df_clean.rename(columns=new_column_names)

df_clean.head()

print(df_clean['colors'].head(10))
print(df_clean['colors'].apply(type).unique())

# Function to extract and format color names
def format_colors(colors_data):
    if isinstance(colors_data, list):  # Check if it's a list
        return ' / '.join([color.get('name', '') for color in colors_data if 'name' in color])
    elif pd.isna(colors_data):  # Handle NaN
        return None
    else:  # Unexpected format
        return None

# Apply the function to the 'colors' column
df_clean['colors'] = df_clean['colors'].apply(format_colors)

# Display results
print(df_clean[['colors']].head(10))

df_clean

print(df_clean['availability'].head(10))
print(df_clean['availability'].apply(type).unique())

# Function to extract 'In stock at Ballymun' from availability data
def extract_store_stock(availability_data):
    if isinstance(availability_data, list):
        for entry in availability_data:
            if entry.get('type2') == 'CASH_AND_CARRY' and 'store' in entry:
                return f"{entry.get('prefix', '')}{entry.get('store', '')}{entry.get('suffix', '')}".strip()
    return None

# Function to extract 'Available for delivery' from availability data
def extract_delivery_status(availability_data):
    if isinstance(availability_data, list):
        for entry in availability_data:
            if entry.get('type2') == 'HOME_DELIVERY' and 'text' in entry:
                return entry.get('text')
    return None

# Apply the functions to create new columns
df_clean['Store_stock'] = df_clean['availability'].apply(extract_store_stock)
df_clean['Availability'] = df_clean['availability'].apply(extract_delivery_status)

# Drop the original 'availability' column if no longer needed
df_clean.drop(columns=['availability'], inplace=True)

# Display the results
print(df_clean[['Store_stock', 'Availability']].head(10))

df_clean

df_clean.info()

import sqlite3

connection = sqlite3.connect('products.db')

cursor = connection.cursor()

df_clean.to_sql('ProductsDetails', connection, if_exists='append', index=False)

cursor.execute("SELECT * FROM ProductsDetails")
rows = cursor.fetchall()
rows

#!pip install flask

#!pip install flask-cors

from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)

CORS(app)

@app.route('/get_products', methods=['GET'])
def getProductsDetails(): # Name of the method
  cursor.execute("SELECT * FROM ProductsDetails")
  rows = cursor.fetchall()
  rows
  Results=[]
  for row in rows: #Format the Output Results and add to return string
    Result={}
    Result['Product name']=row[0]
    Result['Product type']=row[1]
    Result['Image URL']=row[2]
    Result['id']=row[3]
    Result['colors']=row[4]
    Result['homeDelivery']=row[5]
    Result['Design type']=row[6]
    Result['Product variants']=row[7]
    Result['Currency']=row[8]
    Result['Price']=row[9]
    Result['Product Category']=row[10]
    Result['Store_stock']=row[11]
    Result['Availability']=row[12]
    Results.append(Result)
  response={'Results':Results, 'count':len(Results)}
  ret=app.response_class(
    response=json.dumps(response),
    status=200,
    mimetype='application/json'
  )
  return ret #Return the data in a string format

@app.route("/product_add", methods=['GET', 'POST'])
def addProductsDetails():
  if request.method == 'POST':
    Product_name = request.form['Product name']
    Product_type  = request.form['Product type']
    Image_URL = request.form['Image URL']
    id = request.form['id']
    colors = request.form['colors']
    homeDelivery = request.form['homeDelivery']
    Design_type = request.form['Design type']
    Product_variants=  request.form['Product variants']
    Currency =  request.form['Currency ']
    Price =  request.form['Price']
    Product_Category =  request.form['Product Category']
    Store_stock =  request.form['Store_stock']
    Availability =  request.form['Availability']

    print(Product_name, Product_type, Image_URL, id, colors, homeDelivery, Design_type, Product_variants, Currency, Price, Product_Category, Store_stock, Availability)
    cursor.execute("INSERT INTO ProductsDetails (Product name, Product type, Image URL, id, colors, homeDelivery, Design type, Product variants, Currency, Price, Product Category, Store_stock, Availability) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"),
  else:
    return False

  return '{"Result":"Success"}'

@app.route('/')
def home():
    return "Test Flask is running!"